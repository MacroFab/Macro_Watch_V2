C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Parker\
                    -SimplicityStudio\v4_workspace\MacroWatch_V2.1\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Parker\SimplicityStudio\v4_
                    -workspace\MacroWatch_V2.1\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/shared/si8051base;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWI
                    -DTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              PCA_0_enter_DefaultMode_from_RESET();
  27   1              PCACH_2_enter_DefaultMode_from_RESET();
  28   1              PORTS_0_enter_DefaultMode_from_RESET();
  29   1              PORTS_1_enter_DefaultMode_from_RESET();
  30   1              PBCFG_0_enter_DefaultMode_from_RESET();
  31   1              RTC_0_enter_DefaultMode_from_RESET();
  32   1              CLOCK_0_enter_DefaultMode_from_RESET();
  33   1              // Restore the SFRPAGE
  34   1              SFRPAGE = SFRPAGE_save;
  35   1              // [Config Calls]$
  36   1      
  37   1      }
  38          
  39          //================================================================================
  40          // PCA_0_enter_DefaultMode_from_RESET
  41          //================================================================================
  42          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  43   1              // $[PCA0MD - PCA Mode]
  44   1              /***********************************************************************
  45   1               - Disable Watchdog Timer
  46   1               - System clock divided by 12
  47   1               - PCA continues to function normally while the system controller is in
  48   1               Idle Mode
  49   1               - Disable the CF interrupt
  50   1               - Disable Watchdog Timer
  51   1               - Watchdog Timer Enable unlocked
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 2   

  52   1               ***********************************************************************/
  53   1              SFRPAGE = 0x00;
  54   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  55   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
  56   1                              | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
  57   1                              | PCA0MD_WDLCK__UNLOCKED;
  58   1              // [PCA0MD - PCA Mode]$
  59   1      
  60   1              // $[PCA0H - PCA Counter/Timer High Byte]
  61   1              // [PCA0H - PCA Counter/Timer High Byte]$
  62   1      
  63   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  64   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  65   1      
  66   1              // $[PCA0PWM - PCA PWM Configuration]
  67   1              // [PCA0PWM - PCA PWM Configuration]$
  68   1      
  69   1              // $[PCA0CN0 - PCA Control 0]
  70   1              // [PCA0CN0 - PCA Control 0]$
  71   1      
  72   1      }
  73          
  74          //================================================================================
  75          // PCACH_2_enter_DefaultMode_from_RESET
  76          //================================================================================
  77          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
  78   1              // $[PCA0 Settings Save]
  79   1              // Select Capture/Compare register)
  80   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
  81   1              // [PCA0 Settings Save]$
  82   1      
  83   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  84   1              /***********************************************************************
  85   1               - Disable negative edge capture
  86   1               - Disable CCF2 interrupts
  87   1               - Enable match function
  88   1               - 8 to 11-bit PWM selected
  89   1               - Disable positive edge capture
  90   1               - Disable comparator function
  91   1               - Disable PWM function
  92   1               - Disable toggle function
  93   1               ***********************************************************************/
  94   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
  95   1                              | PCA0CPM2_MAT__ENABLED | PCA0CPM2_PWM16__8_BIT
  96   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__DISABLED
  97   1                              | PCA0CPM2_PWM__DISABLED | PCA0CPM2_TOG__DISABLED;
  98   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
  99   1      
 100   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 101   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 102   1      
 103   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 104   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 105   1      
 106   1              // $[Auto-reload]
 107   1              // [Auto-reload]$
 108   1      
 109   1              // $[PCA0 Settings Restore]
 110   1              // [PCA0 Settings Restore]$
 111   1      
 112   1      }
 113          
 114          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 3   

 115          // PORTS_0_enter_DefaultMode_from_RESET
 116          //================================================================================
 117          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 118   1              // $[P0 - Port 0 Pin Latch]
 119   1              /***********************************************************************
 120   1               - P0.0 is low. Set P0.0 to drive low
 121   1               - P0.1 is low. Set P0.1 to drive low
 122   1               - P0.2 is low. Set P0.2 to drive low
 123   1               - P0.3 is low. Set P0.3 to drive low
 124   1               - P0.4 is low. Set P0.4 to drive low
 125   1               - P0.5 is low. Set P0.5 to drive low
 126   1               - P0.6 is high. Set P0.6 to drive or float high
 127   1               - P0.7 is low. Set P0.7 to drive low
 128   1               ***********************************************************************/
 129   1              P0 = P0_B0__LOW | P0_B1__LOW | P0_B2__LOW | P0_B3__LOW | P0_B4__LOW
 130   1                              | P0_B5__LOW | P0_B6__HIGH | P0_B7__LOW;
 131   1              // [P0 - Port 0 Pin Latch]$
 132   1      
 133   1              // $[P0MDOUT - Port 0 Output Mode]
 134   1              /***********************************************************************
 135   1               - P0.0 output is push-pull
 136   1               - P0.1 output is push-pull
 137   1               - P0.2 output is push-pull
 138   1               - P0.3 output is push-pull
 139   1               - P0.4 output is push-pull
 140   1               - P0.5 output is push-pull
 141   1               - P0.6 output is open-drain
 142   1               - P0.7 output is push-pull
 143   1               ***********************************************************************/
 144   1              P0MDOUT = P0MDOUT_B0__PUSH_PULL | P0MDOUT_B1__PUSH_PULL
 145   1                              | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL
 146   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
 147   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__PUSH_PULL;
 148   1              // [P0MDOUT - Port 0 Output Mode]$
 149   1      
 150   1              // $[P0MDIN - Port 0 Input Mode]
 151   1              // [P0MDIN - Port 0 Input Mode]$
 152   1      
 153   1              // $[P0SKIP - Port 0 Skip]
 154   1              // [P0SKIP - Port 0 Skip]$
 155   1      
 156   1              // $[P0MASK - Port 0 Mask]
 157   1              // [P0MASK - Port 0 Mask]$
 158   1      
 159   1              // $[P0MAT - Port 0 Match]
 160   1              // [P0MAT - Port 0 Match]$
 161   1      
 162   1              // $[P0DRV - Port 0 Drive Strength]
 163   1              /***********************************************************************
 164   1               - P0.0 output has low output drive strength
 165   1               - P0.1 output has low output drive strength
 166   1               - P0.2 output has high output drive strength
 167   1               - P0.3 output has low output drive strength
 168   1               - P0.4 output has low output drive strength
 169   1               - P0.5 output has low output drive strength
 170   1               - P0.6 output has low output drive strength
 171   1               - P0.7 output has low output drive strength
 172   1               ***********************************************************************/
 173   1              SFRPAGE = 0x0F;
 174   1              P0DRV = P0DRV_B0__LOW_DRIVE | P0DRV_B1__LOW_DRIVE | P0DRV_B2__HIGH_DRIVE
 175   1                              | P0DRV_B3__LOW_DRIVE | P0DRV_B4__LOW_DRIVE | P0DRV_B5__LOW_DRIVE
 176   1                              | P0DRV_B6__LOW_DRIVE | P0DRV_B7__LOW_DRIVE;
 177   1              // [P0DRV - Port 0 Drive Strength]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 4   

 178   1      
 179   1      }
 180          
 181          //================================================================================
 182          // PORTS_1_enter_DefaultMode_from_RESET
 183          //================================================================================
 184          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 185   1              // $[Missing Pin Skip]
 186   1              // Skip any pins that are not available on this package
 187   1              P1SKIP |= P1SKIP_B4__SKIPPED;
 188   1              // [Missing Pin Skip]$
 189   1      
 190   1              // $[P1 - Port 1 Pin Latch]
 191   1              /***********************************************************************
 192   1               - P1.0 is low. Set P1.0 to drive low
 193   1               - P1.1 is low. Set P1.1 to drive low
 194   1               - P1.2 is low. Set P1.2 to drive low
 195   1               - P1.3 is low. Set P1.3 to drive low
 196   1               - P1.5 is low. Set P1.5 to drive low
 197   1               - P1.6 is high. Set P1.6 to drive or float high
 198   1               - P1.7 is high. Set P1.7 to drive or float high
 199   1               ***********************************************************************/
 200   1              SFRPAGE = 0x00;
 201   1              P1 = P1_B0__LOW | P1_B1__LOW | P1_B2__LOW | P1_B3__LOW | P1_B5__LOW
 202   1                              | P1_B6__HIGH | P1_B7__HIGH;
 203   1              // [P1 - Port 1 Pin Latch]$
 204   1      
 205   1              // $[P1MDOUT - Port 1 Output Mode]
 206   1              /***********************************************************************
 207   1               - P1.0 output is push-pull
 208   1               - P1.1 output is push-pull
 209   1               - P1.2 output is push-pull
 210   1               - P1.3 output is push-pull
 211   1               - P1.5 output is push-pull
 212   1               - P1.6 output is open-drain
 213   1               - P1.7 output is open-drain
 214   1               ***********************************************************************/
 215   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
 216   1                              | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__PUSH_PULL
 217   1                              | P1MDOUT_B5__PUSH_PULL | P1MDOUT_B6__OPEN_DRAIN
 218   1                              | P1MDOUT_B7__OPEN_DRAIN;
 219   1              // [P1MDOUT - Port 1 Output Mode]$
 220   1      
 221   1              // $[P1MDIN - Port 1 Input Mode]
 222   1              /***********************************************************************
 223   1               - P1.0 pin is configured for digital mode
 224   1               - P1.1 pin is configured for digital mode
 225   1               - P1.2 pin is configured for digital mode
 226   1               - P1.3 pin is configured for digital mode
 227   1               - P1.5 pin is configured for digital mode
 228   1               - P1.6 pin is configured for analog mode
 229   1               - P1.7 pin is configured for analog mode
 230   1               ***********************************************************************/
 231   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 232   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B5__DIGITAL | P1MDIN_B6__ANALOG
 233   1                              | P1MDIN_B7__ANALOG;
 234   1              // [P1MDIN - Port 1 Input Mode]$
 235   1      
 236   1              // $[P1SKIP - Port 1 Skip]
 237   1              /***********************************************************************
 238   1               - P1.0 pin is not skipped by the crossbar
 239   1               - P1.1 pin is not skipped by the crossbar
 240   1               - P1.2 pin is not skipped by the crossbar
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 5   

 241   1               - P1.3 pin is not skipped by the crossbar
 242   1               - P1.5 pin is not skipped by the crossbar
 243   1               - P1.6 pin is skipped by the crossbar
 244   1               - P1.7 pin is skipped by the crossbar
 245   1               ***********************************************************************/
 246   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 247   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 248   1                              | P1SKIP_B5__NOT_SKIPPED | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
 249   1              // [P1SKIP - Port 1 Skip]$
 250   1      
 251   1              // $[P1MASK - Port 1 Mask]
 252   1              // [P1MASK - Port 1 Mask]$
 253   1      
 254   1              // $[P1MAT - Port 1 Match]
 255   1              // [P1MAT - Port 1 Match]$
 256   1      
 257   1              // $[P1DRV - Port 1 Drive Strength]
 258   1              // [P1DRV - Port 1 Drive Strength]$
 259   1      
 260   1      }
 261          
 262          //================================================================================
 263          // PBCFG_0_enter_DefaultMode_from_RESET
 264          //================================================================================
 265          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 266   1              // $[XBR2 - Port I/O Crossbar 2]
 267   1              /***********************************************************************
 268   1               - Weak Pullups enabled 
 269   1               - Crossbar enabled
 270   1               ***********************************************************************/
 271   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 272   1              // [XBR2 - Port I/O Crossbar 2]$
 273   1      
 274   1              // $[XBR0 - Port I/O Crossbar 0]
 275   1              // [XBR0 - Port I/O Crossbar 0]$
 276   1      
 277   1              // $[XBR1 - Port I/O Crossbar 1]
 278   1              // [XBR1 - Port I/O Crossbar 1]$
 279   1      
 280   1      }
 281          
 282          //================================================================================
 283          // RTC_0_enter_DefaultMode_from_RESET
 284          //================================================================================
 285          extern void RTC_0_enter_DefaultMode_from_RESET(void) {
 286   1              // $[RTC Initialization]
 287   1              // A variable for providing a delay for external oscillator startup
 288   1              uint16_t delayCounter;
 289   1              // Save the system clock (the system clock will be slowed during the startup delay)
 290   1              uint8_t CLKSEL_save;
 291   1              CLKSEL_save = CLKSEL;
 292   1      
 293   1              // Enable power to the SmaRTClock oscillator circuit (RTC0EN = 1)
 294   1              // [RTC Initialization]$
 295   1      
 296   1              // $[RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]
 297   1              // Set SmaRTClock to Crystal Mode (XMODE = 1).
 298   1              // Disable Automatic Gain Control (AGCEN) and enable Bias Doubling (BIASX2) for fast crystal startup.
 299   1              RTC0ADR = RTC0XCN0;
 300   1              RTC0DAT = RTC0XCN0_XMODE__CRYSTAL | RTC0XCN0_BIASX2__ENABLED;
 301   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 302   1                      ;    //Poll Busy Bit
 303   1              // [RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 6   

 304   1      
 305   1              // $[RTC0XCF - RTC Oscillator Configuration]
 306   1              /***********************************************************************
 307   1               - Enable load capacitance stepping
 308   1               - Load Capacitance Programmed Value = 0x0E
 309   1               ***********************************************************************/
 310   1              RTC0ADR = RTC0XCF;
 311   1              RTC0DAT = RTC0XCF_AUTOSTP__ENABLED | (0x0E << RTC0XCF_LOADCAP__SHIFT);
 312   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 313   1                      ;    //Poll Busy Bit
 314   1              // [RTC0XCF - RTC Oscillator Configuration]$
 315   1      
 316   1              // $[CAPTURE0 - RTC Timer Capture 0]
 317   1              // [CAPTURE0 - RTC Timer Capture 0]$
 318   1      
 319   1              // $[CAPTURE1 - RTC Timer Capture 1]
 320   1              // [CAPTURE1 - RTC Timer Capture 1]$
 321   1      
 322   1              // $[CAPTURE2 - RTC Timer Capture 2]
 323   1              // [CAPTURE2 - RTC Timer Capture 2]$
 324   1      
 325   1              // $[CAPTURE3 - RTC Timer Capture 3]
 326   1              // [CAPTURE3 - RTC Timer Capture 3]$
 327   1      
 328   1              // $[ALARM0 - RTC Alarm Programmed Value 0]
 329   1              // [ALARM0 - RTC Alarm Programmed Value 0]$
 330   1      
 331   1              // $[ALARM1 - RTC Alarm Programmed Value 1]
 332   1              /***********************************************************************
 333   1               - RTC Alarm Programmed Value 1 = 0x80
 334   1               ***********************************************************************/
 335   1              RTC0ADR = ALARM1;
 336   1              RTC0DAT = (0x80 << ALARM1_ALARM1__SHIFT);
 337   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 338   1                      ;    //Poll Busy Bit
 339   1              // [ALARM1 - RTC Alarm Programmed Value 1]$
 340   1      
 341   1              // $[ALARM2 - RTC Alarm Programmed Value 2]
 342   1              // [ALARM2 - RTC Alarm Programmed Value 2]$
 343   1      
 344   1              // $[ALARM3 - RTC Alarm Programmed Value 3]
 345   1              // [ALARM3 - RTC Alarm Programmed Value 3]$
 346   1      
 347   1              // $[RTC0CN - RTC Control]
 348   1              /***********************************************************************
 349   1               - Enable RTC oscillator
 350   1               ***********************************************************************/
 351   1              RTC0ADR = RTC0CN0;
 352   1              RTC0DAT = 0;
 353   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 354   1                      ;    //Poll Busy Bit
 355   1      
 356   1              RTC0ADR = RTC0CN0;
 357   1              RTC0DAT |= RTC0CN0_RTC0EN__ENABLED;
 358   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 359   1                      ;    //Poll Busy Bit
 360   1      
 361   1              // [RTC0CN - RTC Control]$
 362   1      
 363   1              // $[External Oscillator Setup]
 364   1              // Set the clock to a known value for the delay
 365   1              CLKSEL = CLKSEL_CLKSL__LPOSC | CLKSEL_CLKDIV__SYSCLK_DIV_128;
 366   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 7   

 367   1              // Delay for > 20 ms
 368   1              for (delayCounter = 0x150; delayCounter != 0; delayCounter--)
 369   1                      ;
 370   1      
 371   1              // Poll the SmaRTClock Clock Valid Bit (CLKVLD) until the crystal oscillator stabilizes
 372   1              do {
 373   2                      RTC0ADR = RTC0ADR_BUSY__SET | RTC0ADR_ADDR__RTC0XCN0;
 374   2                      while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 375   2                              ;    //Poll Busy Bit
 376   2              } while ((RTC0DAT & RTC0XCN0_CLKVLD__BMASK) == RTC0XCN0_CLKVLD__NOT_SET);
 377   1      
 378   1              // Poll the SmaRTClock Load Capacitance Ready Bit (LOADRDY) until the load capacitance reaches its progra
             -mmed value
 379   1              do {
 380   2                      RTC0ADR = RTC0ADR_BUSY__SET | RTC0ADR_ADDR__RTC0XCF;
 381   2                      while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 382   2                              ;    //Poll Busy Bit
 383   2              } while ((RTC0DAT & RTC0XCF_LOADRDY__BMASK) == RTC0XCF_LOADRDY__NOT_SET);
 384   1      
 385   1              // Enable Automatic Gain Control (AGCEN) and disable Bias Doubling (BIASX2) for maximum power savings
 386   1              /***********************************************************************
 387   1               - Crystal Mode selected
 388   1               - Enable AGC
 389   1               - Disable the Bias Double feature
 390   1               - XMODE determines RTC oscillator source
 391   1               ***********************************************************************/
 392   1              RTC0ADR = RTC0XCN0;
 393   1              RTC0DAT = RTC0XCN0_XMODE__CRYSTAL | RTC0XCN0_AGCEN__ENABLED
 394   1                              | RTC0XCN0_BIASX2__DISABLED | RTC0XCN0_LFOEN__DISABLED;
 395   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 396   1                      ;    //Poll Busy Bit
 397   1      
 398   1              // Enable the SmaRTClock missing clock detector.
 399   1              RTC0ADR = RTC0CN0;
 400   1      
 401   1              // Delay for > 2 ms
 402   1              for (delayCounter = 0x100; delayCounter != 0; delayCounter--)
 403   1                      ;
 404   1      
 405   1              // Clear PMU wake-up source flags
 406   1              PMU0CF = PMU0CF_CLEAR__ALL_FLAGS;
 407   1      
 408   1              // Restore system clock
 409   1              CLKSEL = CLKSEL_save;
 410   1              // Poll CLKRDY to wait for the clock to stabilize
 411   1              while (!((CLKSEL & CLKSEL_CLKRDY__BMASK) == CLKSEL_CLKRDY__SET))
 412   1                      ;
 413   1      
 414   1              /***********************************************************************
 415   1               - Enable RTC oscillator
 416   1               - RTC timer is running
 417   1               - Disable missing RTC detector
 418   1               - Enable RTC alarm
 419   1               - Alarm event flag is set or enable the auto reset function
 420   1               - Do not start a capture operation
 421   1               - Do not start a set operation
 422   1               ***********************************************************************/
 423   1              RTC0ADR = RTC0CN0;
 424   1              RTC0DAT = RTC0CN0_RTC0EN__ENABLED | RTC0CN0_RTC0TR__RUN
 425   1                              | RTC0CN0_MCLKEN__DISABLED | RTC0CN0_RTC0AEN__ENABLED
 426   1                              | RTC0CN0_ALRM__SET | RTC0CN0_RTC0CAP__NOT_SET
 427   1                              | RTC0CN0_RTC0SET__NOT_SET;
 428   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        08/07/2017 15:44:01 PAGE 8   

 429   1                      ;    //Poll Busy Bit
 430   1      
 431   1              // [External Oscillator Setup]$
 432   1      
 433   1      }
 434          
 435          //================================================================================
 436          // CLOCK_0_enter_DefaultMode_from_RESET
 437          //================================================================================
 438          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 439   1      
 440   1              // $[CLKSEL - Clock Select]
 441   1              /***********************************************************************
 442   1               - SYSCLK is equal to selected clock source divided by 1
 443   1               - Clock derived from the RTC
 444   1               ***********************************************************************/
 445   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__RTC;
 446   1              // Wait for the clock to be ready
 447   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 448   1                      ;
 449   1              // [CLKSEL - Clock Select]$
 450   1      
 451   1      }
 452          
 453          extern void PMU_0_enter_DefaultMode_from_RESET(void) {
 454   1      
 455   1      }
 456          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    242    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
