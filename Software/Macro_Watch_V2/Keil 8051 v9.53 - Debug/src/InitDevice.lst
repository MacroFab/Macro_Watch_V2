C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Parker\
                    -Documents\GitHub\Macro_Watch_V2\Software\Macro_Watch_V2\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNIN
                    -GLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/Parker/Documents/GitHub/Macro_Wat
                    -ch_V2/Software/Macro_Watch_V2/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;
                    -C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8SB1;C:/SiliconLabs/SimplicityStudio/v3/developer
                    -/sdks/si8051/v3//Device/EFM8SB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDev
                    -ice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              PCA_0_enter_DefaultMode_from_RESET();
  27   1              PCACH_2_enter_DefaultMode_from_RESET();
  28   1              PORTS_0_enter_DefaultMode_from_RESET();
  29   1              PORTS_1_enter_DefaultMode_from_RESET();
  30   1              PBCFG_0_enter_DefaultMode_from_RESET();
  31   1              RTC_0_enter_DefaultMode_from_RESET();
  32   1              CLOCK_0_enter_DefaultMode_from_RESET();
  33   1              // Restore the SFRPAGE
  34   1              SFRPAGE = SFRPAGE_save;
  35   1              // [Config Calls]$
  36   1      
  37   1      }
  38          
  39          //================================================================================
  40          // PORTS_1_enter_DefaultMode_from_RESET
  41          //================================================================================
  42          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  43   1              // $[Missing Pin Skip]
  44   1              // Skip any pins that are not available on this package
  45   1              P1SKIP |= P1SKIP_B4__SKIPPED;
  46   1              // [Missing Pin Skip]$
  47   1      
  48   1              // $[P1 - Port 1 Pin Latch]
  49   1              /*
  50   1               // P1.0 is low. Set P1.0 to drive low
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 2   

  51   1               // P1.1 is low. Set P1.1 to drive low
  52   1               // P1.2 is low. Set P1.2 to drive low
  53   1               // P1.3 is low. Set P1.3 to drive low
  54   1               // P1.5 is low. Set P1.5 to drive low
  55   1               // P1.6 is high. Set P1.6 to drive or float high
  56   1               // P1.7 is high. Set P1.7 to drive or float high
  57   1               */
  58   1              P1 = P1_B0__LOW | P1_B1__LOW | P1_B2__LOW | P1_B3__LOW | P1_B5__LOW
  59   1                              | P1_B6__HIGH | P1_B7__HIGH;
  60   1              // [P1 - Port 1 Pin Latch]$
  61   1      
  62   1              // $[P1MDOUT - Port 1 Output Mode]
  63   1              /*
  64   1               // P1.0 output is push-pull
  65   1               // P1.1 output is push-pull
  66   1               // P1.2 output is push-pull
  67   1               // P1.3 output is push-pull
  68   1               // P1.5 output is push-pull
  69   1               // P1.6 output is open-drain
  70   1               // P1.7 output is open-drain
  71   1               */
  72   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
  73   1                              | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__PUSH_PULL
  74   1                              | P1MDOUT_B5__PUSH_PULL | P1MDOUT_B6__OPEN_DRAIN
  75   1                              | P1MDOUT_B7__OPEN_DRAIN;
  76   1              // [P1MDOUT - Port 1 Output Mode]$
  77   1      
  78   1              // $[P1MDIN - Port 1 Input Mode]
  79   1              /*
  80   1               // P1.0 pin is configured for digital mode
  81   1               // P1.1 pin is configured for digital mode
  82   1               // P1.2 pin is configured for digital mode
  83   1               // P1.3 pin is configured for digital mode
  84   1               // P1.5 pin is configured for digital mode
  85   1               // P1.6 pin is configured for analog mode
  86   1               // P1.7 pin is configured for analog mode
  87   1               */
  88   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
  89   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B5__DIGITAL | P1MDIN_B6__ANALOG
  90   1                              | P1MDIN_B7__ANALOG;
  91   1              // [P1MDIN - Port 1 Input Mode]$
  92   1      
  93   1              // $[P1SKIP - Port 1 Skip]
  94   1              /*
  95   1               // P1.0 pin is not skipped by the crossbar
  96   1               // P1.1 pin is not skipped by the crossbar
  97   1               // P1.2 pin is not skipped by the crossbar
  98   1               // P1.3 pin is not skipped by the crossbar
  99   1               // P1.5 pin is not skipped by the crossbar
 100   1               // P1.6 pin is skipped by the crossbar
 101   1               // P1.7 pin is skipped by the crossbar
 102   1               */
 103   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 104   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 105   1                              | P1SKIP_B5__NOT_SKIPPED | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
 106   1              // [P1SKIP - Port 1 Skip]$
 107   1      
 108   1              // $[P1MASK - Port 1 Mask]
 109   1              // [P1MASK - Port 1 Mask]$
 110   1      
 111   1              // $[P1MAT - Port 1 Match]
 112   1              // [P1MAT - Port 1 Match]$
 113   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 3   

 114   1              // $[P1DRV - Port 1 Drive Strength]
 115   1              // [P1DRV - Port 1 Drive Strength]$
 116   1      
 117   1      }
 118          
 119          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 120   1              // $[PCA0MD - PCA Mode]
 121   1              /*
 122   1               // Disable Watchdog Timer
 123   1               // System clock divided by 12
 124   1               // PCA continues to function normally while the system controller is in
 125   1               //     Idle Mode
 126   1               // Disable the CF interrupt
 127   1               // Disable Watchdog Timer
 128   1               // Watchdog Timer Enable unlocked
 129   1               */
 130   1              SFRPAGE = 0x00;
 131   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
 132   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
 133   1                              | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
 134   1                              | PCA0MD_WDLCK__UNLOCKED;
 135   1              // [PCA0MD - PCA Mode]$
 136   1      
 137   1              // $[PCA0H - PCA Counter/Timer High Byte]
 138   1              // [PCA0H - PCA Counter/Timer High Byte]$
 139   1      
 140   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 141   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 142   1      
 143   1              // $[PCA0PWM - PCA PWM Configuration]
 144   1              // [PCA0PWM - PCA PWM Configuration]$
 145   1      
 146   1              // $[PCA0CN0 - PCA Control 0]
 147   1              // [PCA0CN0 - PCA Control 0]$
 148   1      
 149   1      }
 150          
 151          extern void RTC_0_enter_DefaultMode_from_RESET(void) {
 152   1              // $[RTC Initialization]
 153   1              // A variable for providing a delay for external oscillator startup
 154   1              uint16_t delayCounter;
 155   1              // Save the system clock (the system clock will be slowed during the startup delay)
 156   1              uint8_t CLKSEL_save;
 157   1              CLKSEL_save = CLKSEL;
 158   1      
 159   1              // Enable power to the SmaRTClock oscillator circuit (RTC0EN = 1)
 160   1              // [RTC Initialization]$
 161   1      
 162   1              // $[RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]
 163   1              // Set SmaRTClock to Crystal Mode (XMODE = 1).
 164   1              // Disable Automatic Gain Control (AGCEN) and enable Bias Doubling (BIASX2) for fast crystal startup.
 165   1              RTC0ADR = RTC0XCN0;
 166   1              RTC0DAT = RTC0XCN0_XMODE__CRYSTAL | RTC0XCN0_BIASX2__ENABLED;
 167   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 168   1                      ;    //Poll Busy Bit
 169   1              // [RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]$
 170   1      
 171   1              // $[RTC0XCF - RTC Oscillator Configuration]
 172   1              /*
 173   1               // Disable load capacitance stepping
 174   1               // Load Capacitance Programmed Value = 0x0E
 175   1               */
 176   1              RTC0ADR = RTC0XCF;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 4   

 177   1              RTC0DAT = RTC0XCF_AUTOSTP__DISABLED | (0x0E << RTC0XCF_LOADCAP__SHIFT);
 178   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 179   1                      ;    //Poll Busy Bit
 180   1              // [RTC0XCF - RTC Oscillator Configuration]$
 181   1      
 182   1              // $[CAPTURE0 - RTC Timer Capture 0]
 183   1              // [CAPTURE0 - RTC Timer Capture 0]$
 184   1      
 185   1              // $[CAPTURE1 - RTC Timer Capture 1]
 186   1              // [CAPTURE1 - RTC Timer Capture 1]$
 187   1      
 188   1              // $[CAPTURE2 - RTC Timer Capture 2]
 189   1              // [CAPTURE2 - RTC Timer Capture 2]$
 190   1      
 191   1              // $[CAPTURE3 - RTC Timer Capture 3]
 192   1              // [CAPTURE3 - RTC Timer Capture 3]$
 193   1      
 194   1              // $[ALARM0 - RTC Alarm Programmed Value 0]
 195   1              // [ALARM0 - RTC Alarm Programmed Value 0]$
 196   1      
 197   1              // $[ALARM1 - RTC Alarm Programmed Value 1]
 198   1              /*
 199   1               // RTC Alarm Programmed Value 1 = 0x80
 200   1               */
 201   1              RTC0ADR = ALARM1;
 202   1              RTC0DAT = (0x80 << ALARM1_ALARM1__SHIFT);
 203   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 204   1                      ;    //Poll Busy Bit
 205   1              // [ALARM1 - RTC Alarm Programmed Value 1]$
 206   1      
 207   1              // $[ALARM2 - RTC Alarm Programmed Value 2]
 208   1              // [ALARM2 - RTC Alarm Programmed Value 2]$
 209   1      
 210   1              // $[ALARM3 - RTC Alarm Programmed Value 3]
 211   1              // [ALARM3 - RTC Alarm Programmed Value 3]$
 212   1      
 213   1              // $[RTC0CN - RTC Control]
 214   1              /*
 215   1               // Enable RTC oscillator
 216   1               */
 217   1              RTC0ADR = RTC0CN0;
 218   1              RTC0DAT = 0;
 219   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 220   1                      ;    //Poll Busy Bit
 221   1      
 222   1              RTC0ADR = RTC0CN0;
 223   1              RTC0DAT |= RTC0CN0_RTC0EN__ENABLED;
 224   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 225   1                      ;    //Poll Busy Bit
 226   1      
 227   1              // [RTC0CN - RTC Control]$
 228   1      
 229   1              // $[External Oscillator Setup]
 230   1              // Set the clock to a known value for the delay
 231   1              CLKSEL = CLKSEL_CLKSL__LPOSC | CLKSEL_CLKDIV__SYSCLK_DIV_128;
 232   1      
 233   1              // Delay for > 20 ms
 234   1              for (delayCounter = 0x150; delayCounter != 0; delayCounter--)
 235   1                      ;
 236   1      
 237   1              // Poll the SmaRTClock Clock Valid Bit (CLKVLD) until the crystal oscillator stabilizes
 238   1              do {
 239   2                      RTC0ADR = RTC0ADR_BUSY__SET | RTC0ADR_ADDR__RTC0XCN0;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 5   

 240   2                      while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 241   2                              ;    //Poll Busy Bit
 242   2              } while ((RTC0DAT & RTC0XCN0_CLKVLD__BMASK) == RTC0XCN0_CLKVLD__NOT_SET);
 243   1      
 244   1              // Enable Automatic Gain Control (AGCEN) and disable Bias Doubling (BIASX2) for maximum power savings
 245   1              /*
 246   1               // Crystal Mode selected
 247   1               // Disable AGC
 248   1               // Enable the Bias Double feature
 249   1               // XMODE determines RTC oscillator source
 250   1               */
 251   1              RTC0ADR = RTC0XCN0;
 252   1              RTC0DAT = RTC0XCN0_XMODE__CRYSTAL | RTC0XCN0_AGCEN__DISABLED
 253   1                              | RTC0XCN0_BIASX2__ENABLED | RTC0XCN0_LFOEN__DISABLED;
 254   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 255   1                      ;    //Poll Busy Bit
 256   1      
 257   1              // Enable the SmaRTClock missing clock detector.
 258   1              /*
 259   1               // Enable missing RTC detector
 260   1               */
 261   1              RTC0ADR = RTC0CN0;
 262   1              RTC0DAT |= RTC0CN0_MCLKEN__ENABLED;
 263   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 264   1                      ;    //Poll Busy Bit
 265   1      
 266   1              // Delay for > 2 ms
 267   1              for (delayCounter = 0x100; delayCounter != 0; delayCounter--)
 268   1                      ;
 269   1      
 270   1              // Clear PMU wake-up source flags
 271   1              PMU0CF = PMU0CF_CLEAR__ALL_FLAGS;
 272   1      
 273   1              // Restore system clock
 274   1              CLKSEL = CLKSEL_save;
 275   1              // Poll CLKRDY to wait for the clock to stabilize
 276   1              while (!((CLKSEL & CLKSEL_CLKRDY__BMASK) == CLKSEL_CLKRDY__SET))
 277   1                      ;
 278   1      
 279   1              /*
 280   1               // Enable RTC oscillator
 281   1               // RTC timer is running
 282   1               // Enable missing RTC detector
 283   1               // Enable RTC alarm
 284   1               // Alarm event flag is set or enable the auto reset function
 285   1               // Do not start a capture operation
 286   1               // Do not start a set operation
 287   1               */
 288   1              RTC0ADR = RTC0CN0;
 289   1              RTC0DAT = RTC0CN0_RTC0EN__ENABLED | RTC0CN0_RTC0TR__RUN
 290   1                              | RTC0CN0_MCLKEN__ENABLED | RTC0CN0_RTC0AEN__ENABLED
 291   1                              | RTC0CN0_ALRM__SET | RTC0CN0_RTC0CAP__NOT_SET
 292   1                              | RTC0CN0_RTC0SET__NOT_SET;
 293   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 294   1                      ;    //Poll Busy Bit
 295   1      
 296   1              // [External Oscillator Setup]$
 297   1      
 298   1      }
 299          
 300          extern void EXTINT_0_enter_DefaultMode_from_RESET(void) {
 301   1              // $[IT01CF - INT0/INT1 Configuration]
 302   1              /*
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 6   

 303   1               // INT0 input is active low
 304   1               // Select P0.6
 305   1               // INT1 input is active low
 306   1               // Select P0.0
 307   1               */
 308   1              IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_6
 309   1                              | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_0;
 310   1              // [IT01CF - INT0/INT1 Configuration]$
 311   1      
 312   1      }
 313          
 314          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 315   1              // $[XBR2 - Port I/O Crossbar 2]
 316   1              /*
 317   1               // Weak Pullups enabled 
 318   1               // Crossbar enabled
 319   1               */
 320   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 321   1              // [XBR2 - Port I/O Crossbar 2]$
 322   1      
 323   1              // $[XBR0 - Port I/O Crossbar 0]
 324   1              // [XBR0 - Port I/O Crossbar 0]$
 325   1      
 326   1              // $[XBR1 - Port I/O Crossbar 1]
 327   1              // [XBR1 - Port I/O Crossbar 1]$
 328   1      
 329   1      }
 330          
 331          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 332   1              // $[EIE1 - Extended Interrupt Enable 1]
 333   1              // [EIE1 - Extended Interrupt Enable 1]$
 334   1      
 335   1              // $[EIP1 - Extended Interrupt Priority 1]
 336   1              // [EIP1 - Extended Interrupt Priority 1]$
 337   1      
 338   1              // $[IE - Interrupt Enable]
 339   1              /*
 340   1               // Enable each interrupt according to its individual mask setting
 341   1               // Enable interrupt requests generated by the INT0 input
 342   1               // Disable external interrupt 1
 343   1               // Disable all SPI0 interrupts
 344   1               // Disable all Timer 0 interrupt
 345   1               // Disable all Timer 1 interrupt
 346   1               // Disable Timer 2 interrupt
 347   1               // Disable UART0 interrupt
 348   1               */
 349   1              IE = IE_EA__ENABLED | IE_EX0__ENABLED | IE_EX1__DISABLED
 350   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 351   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 352   1              // [IE - Interrupt Enable]$
 353   1      
 354   1              // $[IP - Interrupt Priority]
 355   1              // [IP - Interrupt Priority]$
 356   1      
 357   1              // $[EIE2 - Extended Interrupt Enable 2]
 358   1              // [EIE2 - Extended Interrupt Enable 2]$
 359   1      
 360   1              // $[EIP2 - Extended Interrupt Priority 2]
 361   1              // [EIP2 - Extended Interrupt Priority 2]$
 362   1      
 363   1      }
 364          
 365          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 7   

 366   1              // $[P0 - Port 0 Pin Latch]
 367   1              /*
 368   1               // P0.0 is low. Set P0.0 to drive low
 369   1               // P0.1 is low. Set P0.1 to drive low
 370   1               // P0.2 is low. Set P0.2 to drive low
 371   1               // P0.3 is low. Set P0.3 to drive low
 372   1               // P0.4 is low. Set P0.4 to drive low
 373   1               // P0.5 is low. Set P0.5 to drive low
 374   1               // P0.6 is high. Set P0.6 to drive or float high
 375   1               // P0.7 is low. Set P0.7 to drive low
 376   1               */
 377   1              P0 = P0_B0__LOW | P0_B1__LOW | P0_B2__LOW | P0_B3__LOW | P0_B4__LOW
 378   1                              | P0_B5__LOW | P0_B6__HIGH | P0_B7__LOW;
 379   1              // [P0 - Port 0 Pin Latch]$
 380   1      
 381   1              // $[P0MDOUT - Port 0 Output Mode]
 382   1              /*
 383   1               // P0.0 output is push-pull
 384   1               // P0.1 output is push-pull
 385   1               // P0.2 output is push-pull
 386   1               // P0.3 output is push-pull
 387   1               // P0.4 output is push-pull
 388   1               // P0.5 output is push-pull
 389   1               // P0.6 output is open-drain
 390   1               // P0.7 output is push-pull
 391   1               */
 392   1              P0MDOUT = P0MDOUT_B0__PUSH_PULL | P0MDOUT_B1__PUSH_PULL
 393   1                              | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL
 394   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
 395   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__PUSH_PULL;
 396   1              // [P0MDOUT - Port 0 Output Mode]$
 397   1      
 398   1              // $[P0MDIN - Port 0 Input Mode]
 399   1              // [P0MDIN - Port 0 Input Mode]$
 400   1      
 401   1              // $[P0SKIP - Port 0 Skip]
 402   1              // [P0SKIP - Port 0 Skip]$
 403   1      
 404   1              // $[P0MASK - Port 0 Mask]
 405   1              // [P0MASK - Port 0 Mask]$
 406   1      
 407   1              // $[P0MAT - Port 0 Match]
 408   1              // [P0MAT - Port 0 Match]$
 409   1      
 410   1              // $[P0DRV - Port 0 Drive Strength]
 411   1              // [P0DRV - Port 0 Drive Strength]$
 412   1      
 413   1      }
 414          
 415          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 416   1              // $[CLKSEL - Clock Select]
 417   1              /*
 418   1               // SYSCLK is equal to selected clock source divided by 1
 419   1               // Clock derived from the RTC
 420   1               */
 421   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__RTC;
 422   1              // Wait for the clock to be ready
 423   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 424   1                      ;
 425   1              // [CLKSEL - Clock Select]$
 426   1      
 427   1      }
 428          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/21/2016 11:22:19 PAGE 8   

 429          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
 430   1      
 431   1              // $[PCA0 Settings Save]
 432   1              // Select Capture/Compare register)
 433   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 434   1              // [PCA0 Settings Save]$
 435   1      
 436   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 437   1              /*
 438   1               // Disable negative edge capture
 439   1               // Disable CCF2 interrupts
 440   1               // Enable match function
 441   1               // 8 to 11-bit PWM selected
 442   1               // Disable positive edge capture
 443   1               // Disable comparator function
 444   1               // Disable PWM function
 445   1               // Disable toggle function
 446   1               */
 447   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
 448   1                              | PCA0CPM2_MAT__ENABLED | PCA0CPM2_PWM16__8_BIT
 449   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__DISABLED
 450   1                              | PCA0CPM2_PWM__DISABLED | PCA0CPM2_TOG__DISABLED;
 451   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 452   1      
 453   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 454   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 455   1      
 456   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 457   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 458   1      
 459   1              // $[Auto-reload]
 460   1              // [Auto-reload]$
 461   1      
 462   1              // $[PCA0 Settings Restore]
 463   1              // [PCA0 Settings Restore]$
 464   1      
 465   1      }
 466          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    235    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
